import snscrape.modules.twitter as sntwitter
from telegram import Update, Bot
from telegram.ext import Updater, CommandHandler, CallbackContext
import json, time, threading, os

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
BOT_TOKEN = "8087431779:AAGlIYAxhIyRg-5_oAotxFdtAyaIxqtOEoo"  # —Ç–≤–æ–π —Ç–æ–∫–µ–Ω
CHAT_ID = 448275217                                               # —Ç–≤–æ–π Telegram ID
DATA_FILE = "twitter_users.json"                                  # —Ñ–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö

bot = Bot(token=BOT_TOKEN)

# === –†–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ ===
def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r") as f:
            return json.load(f)
    return {"users": [], "last_ids": {}}

def save_data(data):
    with open(DATA_FILE, "w") as f:
        json.dump(data, f, indent=2)

# === –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–≤–∏—Ç–æ–≤ ===
def get_latest_tweet(user):
    try:
        for tweet in sntwitter.TwitterUserScraper(user).get_items():
            return tweet  # –±–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π (–ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ @{user}: {e}")
        return None

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Ç–≤–∏—Ç–æ–≤ ===
def check_new_tweets():
    data = load_data()
    while True:
        for user in data["users"]:
            tweet = get_latest_tweet(user)
            if not tweet:
                continue
            tweet_id = str(tweet.id)
            if data["last_ids"].get(user) != tweet_id:
                text = (
                    f"üïä –ù–æ–≤—ã–π —Ç–≤–∏—Ç –æ—Ç @{user}:\n\n"
                    f"{tweet.content}\n\n"
                    f"üîó https://x.com/{user}/status/{tweet.id}"
                )
                bot.send_message(chat_id=CHAT_ID, text=text)
                data["last_ids"][user] = tweet_id
                save_data(data)
        time.sleep(30)  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 1 –º–∏–Ω—É—Ç

# === –ö–æ–º–∞–Ω–¥—ã Telegram ===
def add_user(update: Update, context: CallbackContext):
    data = load_data()
    if len(context.args) == 0:
        update.message.reply_text("‚ùó –ò—Å–ø–æ–ª—å–∑—É–π: /add –∏–º—è_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ @)")
        return
    user = context.args[0].replace("@", "")
    if user not in data["users"]:
        data["users"].append(user)
        save_data(data)
        update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user} –¥–æ–±–∞–≤–ª–µ–Ω!")
    else:
        update.message.reply_text("‚ö†Ô∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω.")

def list_users(update: Update, context: CallbackContext):
    data = load_data()
    if not data["users"]:
        update.message.reply_text("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç. –î–æ–±–∞–≤—å –∫–æ–≥–æ-—Ç–æ —á–µ—Ä–µ–∑ /add")
        return
    users_list = "\n".join([f"@{u}" for u in data["users"]])
    update.message.reply_text(f"üìã –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n{users_list}")

def start(update: Update, context: CallbackContext):
    update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –Ω–æ–≤—ã–µ —Ç–≤–∏—Ç—ã.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/add @user ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "/list ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫\n"
    )

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
def main():
    updater = Updater(BOT_TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("add", add_user))
    dp.add_handler(CommandHandler("list", list_users))

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–≤–∏—Ç–æ–≤
    threading.Thread(target=check_new_tweets, daemon=True).start()

    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()
