import os
import time
import json
import threading
import requests
from telegram import Update, Bot
from telegram.ext import Updater, CommandHandler, CallbackContext

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = int(os.getenv("CHAT_ID"))
TWITTER_BEARER_TOKEN = os.getenv("TWITTER_BEARER_TOKEN")

DATA_FILE = "twitter_users.json"
CHECK_INTERVAL = 30  # –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥

bot = Bot(token=BOT_TOKEN)


# === –†–ê–ë–û–¢–ê –° –î–ê–ù–ù–´–ú–ò ===
def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r") as f:
            return json.load(f)
    return {"users": [], "last_ids": {}}


def save_data(data):
    with open(DATA_FILE, "w") as f:
        json.dump(data, f, indent=2)


# === –ü–†–û–í–ï–†–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö TWITTER API ===
def test_twitter_api():
    url = "https://api.twitter.com/2/users/by/username/elonmusk"
    headers = {"Authorization": f"Bearer {TWITTER_BEARER_TOKEN}"}
    resp = requests.get(url, headers=headers)
    if resp.status_code == 200:
        print("‚úÖ Twitter API connection OK")
        return True
    else:
        print(f"‚ùå Twitter API error: {resp.status_code} ‚Äî {resp.text}")
        return False


# === –ü–û–õ–£–ß–ï–ù–ò–ï –ü–û–°–õ–ï–î–ù–ï–ì–û –¢–í–ò–¢–ê ===
def get_latest_tweet(user):
    try:
        headers = {"Authorization": f"Bearer {TWITTER_BEARER_TOKEN}"}

        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_url = f"https://api.twitter.com/2/users/by/username/{user}"
        user_resp = requests.get(user_url, headers=headers).json()

        if "data" not in user_resp:
            print(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user}")
            return None

        user_id = user_resp["data"]["id"]

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç–≤–∏—Ç—ã
        tweets_url = (
            f"https://api.twitter.com/2/users/{user_id}/tweets?max_results=5"
            f"&tweet.fields=created_at,text,id"
        )
        tweets_resp = requests.get(tweets_url, headers=headers).json()

        if "data" in tweets_resp and len(tweets_resp["data"]) > 0:
            tweet = tweets_resp["data"][0]
            print(f"üì• –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ç–≤–∏—Ç @{user}: {tweet['text'][:60]}...")
            return tweet

        print(f"‚è≥ –£ @{user} –Ω–µ—Ç –Ω–æ–≤—ã—Ö —Ç–≤–∏—Ç–æ–≤")
        return None

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ @{user}: {e}")
        return None


# === –ü–†–û–í–ï–†–ö–ê –ù–û–í–´–• –¢–í–ò–¢–û–í ===
def check_new_tweets():
    data = load_data()
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç Twitter –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥...")

    while True:
        for user in data["users"]:
            tweet = get_latest_tweet(user)
            if not tweet:
                continue

            tweet_id = str(tweet["id"])
            last_id = data["last_ids"].get(user)

            if last_id != tweet_id:
                msg = (
                    f"üïä –ù–æ–≤—ã–π —Ç–≤–∏—Ç –æ—Ç @{user}:\n\n"
                    f"{tweet['text']}\n\n"
                    f"üîó https://x.com/{user}/status/{tweet['id']}"
                )
                try:
                    bot.send_message(chat_id=CHAT_ID, text=msg)
                    print(f"üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ç–≤–∏—Ç @{user}")
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

                data["last_ids"][user] = tweet_id
                save_data(data)

        time.sleep(CHECK_INTERVAL)


# === TELEGRAM –ö–û–ú–ê–ù–î–´ ===
def start(update: Update, context: CallbackContext):
    update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –Ω–æ–≤—ã–µ —Ç–≤–∏—Ç—ã.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/add username ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "/list ‚Äî —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö\n"
        "/status ‚Äî —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞"
    )


def add_user(update: Update, context: CallbackContext):
    data = load_data()
    if len(context.args) == 0:
        update.message.reply_text("‚ùó –ò—Å–ø–æ–ª—å–∑—É–π: /add –∏–º—è_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ @)")
        return
    user = context.args[0].replace("@", "")
    if user not in data["users"]:
        data["users"].append(user)
        save_data(data)
        update.message.reply_text(f"‚úÖ –¢–µ–ø–µ—Ä—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é @{user}\nüîó https://x.com/{user}")
    else:
        update.message.reply_text(f"‚ö†Ô∏è @{user} —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω.\nüîó https://x.com/{user}")


def list_users(update: Update, context: CallbackContext):
    data = load_data()
    if not data["users"]:
        update.message.reply_text("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç. –î–æ–±–∞–≤—å –∫–æ–≥–æ-—Ç–æ —á–µ—Ä–µ–∑ /add")
        return
    users_list = "\n".join([f"@{u} ‚Üí https://x.com/{u}" for u in data["users"]])
    update.message.reply_text(f"üìã –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n{users_list}")


def status(update: Update, context: CallbackContext):
    data = load_data()
    count = len(data["users"])
    update.message.reply_text(
        f"üü¢ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç.\n–ü—Ä–æ–≤–µ—Ä—è–µ—Ç {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–∞–∂–¥—ã–µ {CHECK_INTERVAL} —Å–µ–∫."
    )


# === –û–°–ù–û–í–ù–û–ô –ó–ê–ü–£–°–ö ===
def main():
    if not test_twitter_api():
        print("‚ùå –û—Å—Ç–∞–Ω–æ–≤–∫–∞: Twitter API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç.")
        return

    updater = Updater(BOT_TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("add", add_user))
    dp.add_handler(CommandHandler("list", list_users))
    dp.add_handler(CommandHandler("status", status))

    # –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–≤–∏—Ç–æ–≤
    threading.Thread(target=check_new_tweets, daemon=True).start()

    # –∏—Å–ø–æ–ª—å–∑—É–µ–º polling, –∞ –Ω–µ webhook (—Ä–∞–±–æ—Ç–∞–µ—Ç –≤ Free-–≤–µ—Ä—Å–∏–∏)
    print("üåê Telegram polling –∑–∞–ø—É—â–µ–Ω...")
    updater.start_polling()
    updater.idle()


if __name__ == "__main__":
    main()
