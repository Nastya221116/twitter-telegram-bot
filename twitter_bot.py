import os
import time
import json
import snscrape.modules.twitter as sntwitter
from telegram import Update, Bot
from telegram.ext import Updater, CommandHandler, CallbackContext
import threading

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = int(os.getenv("CHAT_ID"))
DATA_FILE = "twitter_users.json"
CHECK_INTERVAL = 60  # —Å–µ–∫

bot = Bot(token=BOT_TOKEN)

def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r") as f:
            return json.load(f)
    return {"users": [], "last_ids": {}}

def save_data(data):
    with open(DATA_FILE, "w") as f:
        json.dump(data, f, indent=2)

def get_latest_tweet(user):
    try:
        for tweet in sntwitter.TwitterUserScraper(user).get_items():
            return tweet
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ @{user}: {e}")
        return None

def check_new_tweets():
    data = load_data()
    print("‚úÖ Bot started successfully and checking Twitter every minute...")
    while True:
        for user in data["users"]:
            tweet = get_latest_tweet(user)
            if not tweet:
                continue
            tweet_id = str(tweet.id)
            if data["last_ids"].get(user) != tweet_id:
                msg = (
                    f"üïä –ù–æ–≤—ã–π —Ç–≤–∏—Ç –æ—Ç @{user}:\n\n"
                    f"{tweet.content}\n\n"
                    f"üîó https://x.com/{user}/status/{tweet.id}"
                )
                bot.send_message(chat_id=CHAT_ID, text=msg)
                data["last_ids"][user] = tweet_id
                save_data(data)
        time.sleep(CHECK_INTERVAL)

def start(update: Update, context: CallbackContext):
    update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –Ω–æ–≤—ã–µ —Ç–≤–∏—Ç—ã.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/add @user ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "/list ‚Äî —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö\n"
        "/status ‚Äî —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞"
    )

def add_user(update: Update, context: CallbackContext):
    data = load_data()
    if len(context.args) == 0:
        update.message.reply_text("‚ùó –ò—Å–ø–æ–ª—å–∑—É–π: /add –∏–º—è_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ @)")
        return
    user = context.args[0].replace("@", "")
    if user not in data["users"]:
        data["users"].append(user)
        save_data(data)
        update.message.reply_text(
            f"‚úÖ –¢–µ–ø–µ—Ä—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é @{user}\nüîó https://x.com/{user}"
        )
    else:
        update.message.reply_text(f"‚ö†Ô∏è @{user} —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω.\nüîó https://x.com/{user}")

def list_users(update: Update, context: CallbackContext):
    data = load_data()
    if not data["users"]:
        update.message.reply_text("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç. –î–æ–±–∞–≤—å –∫–æ–≥–æ-—Ç–æ —á–µ—Ä–µ–∑ /add")
        return
    users_list = "\n".join([f"@{u} ‚Üí https://x.com/{u}" for u in data["users"]])
    update.message.reply_text(f"üìã –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n{users_list}")

def status(update: Update, context: CallbackContext):
    data = load_data()
    count = len(data["users"])
    update.message.reply_text(
        f"üü¢ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç.\n–ü—Ä–æ–≤–µ—Ä—è–µ—Ç {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–∞–∂–¥—ã–µ {CHECK_INTERVAL} —Å–µ–∫."
    )

def main():
    updater = Updater(BOT_TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("add", add_user))
    dp.add_handler(CommandHandler("list", list_users))
    dp.add_handler(CommandHandler("status", status))

    threading.Thread(target=check_new_tweets, daemon=True).start()

    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()
